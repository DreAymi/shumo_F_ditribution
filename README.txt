附件一共包含4个部分
1、main.py 是程序的全部代码，并且模块化，可直接执行，程序使用python3编写，请在python3环境下执行
	命令行进入main.py所在路径下，执行:
	python main.py --method greedy或genetic --problem 2或3
	其中--method参数可输入greedy或genetic，分别代表使用贪心算法和遗传算法，--problem参数可输入2或3，分别代表求解的问题2或3
	1）当--method参数使用greedy时，求解的是问题1，--problem参数无作用；若想使用greedy方法来求问题23，则可以将遗传算法里面的种群初始化方法改为使用贪心选择，并让遗传算法不迭代，就相当于从第一问贪心选择得到的200（种群个数）个结果中，选对于问题2 3相对最好的那个结果作为2 3问的答案。

	2）当--method参数使用genetic时，则使用遗传算法求解问题1 2 3，而参数--problem只包含23，是因为问题一如果用遗传算法解，则直接将遗传算法的评价函数改一下就好了。但是23就不得不区分开来。

	使用事例：
	python main.py --method greedy
	表示使用贪心算法求解第1问
	python main.py --method genetic --problem 3
	表示使用贪心算法求解第3问

2、original_data 是程序的输入，即赛题的原始数据，我将excel数据转化为csv格式，并保存为Pucks Gates Tickets

3、save_tempresult是程序生成的一些统计结果，比如每个登机口的使用率（gate_shiyonglv.txt）、每个时间段的puck数分布（statistic_time.txt）、以及每次生成的按照puck的序号排序的登机口号分配

4、最后对问题1 2 3的结果保存在result.csv中，后5列分别保存了：问题一登机口：（贪心选择结果）、问题一登机口：（遗传算法结果）、问题二登机口：（贪心选择结果）、问题二登机口：（轮盘选择优化后的基因算法结果）、问题三登机口：（轮盘选择优化后的基因算法结果）

5、题目中对于问题1 2 3的一些其他统计信息都输出在命令行，比如分配总乘客数、失败乘客数、T S登记口使用数、宽 窄飞机成功分配数、时间段人数比例、紧张度人数分布等等。
